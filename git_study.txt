git中首先工作区，暂存区，然后版本库分支（默认master）
git中有a,b两个文件

情况一：修改操作都未add，commit
1、a中有增操作，在工作区时
2、a中有增操作，在暂存区时
3、a中有增操作，提交git库后
前提是a,b两个文件已经存在git库中才行（即必须在git目录下才行，不然git无法检测变动），分别向上退回一次

答1：由于并没有进行add操作，所以git不能对他做任何操作（只能检测到这个a文件没有add,不能检测到它的变化：如增加，修改内容），
	除非先进行一步add操作
	所以没有任何意义，
答2：利用命令：git status -- a.txt 查看时它会提醒：a文件还没有commit到版本库分支上，但a文件中又有改动需要add,
	 可以利用命令：git diff head -- a.txt 查看当前工作区的内容和版本库分支中的内容的区别。
	 
	a中既然有增操作，那退回一次就是，去掉了刚刚增操作带来的内容，
	利用命令：git checkout -- a.txt可以达到这个目的(把a.txt文件在工作区的修改全部撤销，如果你不止做了增操作，而且做了其
	他操作如改等等，都将被撤销)
	
	最后令用命令cat a.txt查看发现刚刚新添加的一行内容果然消失了。
	
	但我此时又反悔了，不想去掉刚刚新增的数据，可以用命令：？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？
	
	
**************理解git checkout命令**********************************
命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；(上一次的git commit 后,修改readme.txt 但没有执行git add,回到上一次的git commit后的结果)

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。(修改readme.txt,并且git add,然后又修改了readme.txt, 此时执行git checkout,回到git add 后的状态)

**************理解git checkout命令**********************************

答3：利用命令：git checkout -- a.txt可以达到这个目的

总结情况一：git checkout -- file可以丢弃工作区的修改：git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

情况二：修改操作已经add，但未commit
答2：git reset HEAD a.txt 命令可以把最近一次add的所有操作全部撤销。(例如：你最近一次进行了增加了2行数据，修改了一行数据，然后add了，那么这个增加的2行数据和修改的数据都将撤销)

总结情况二：git checkout -- file可以丢弃暂存区的修改，就是让这个文件回到最近一次git commit或git add时的状态

情况三：修改操作已经add和commit
答1，2，3：
	利用git reset --hard head^ -- a.txt 将a文件退回到上一个版本
		利用git reset --hard head~n -- a.txt 将a文件退回到上n个版本
		
	利用命令git log --pretty=oneline -- a.txt可以查看目前有几个版本（即commit了几次），可以看见每个版本的注释和id
		或者利用git reset --hard 1094a（id的前几位字符）命令退回到指定版本
		
特殊情况：
	对于上一部操作后悔了，无论是撤销还是其他的，可以利用命令：git reflog查看命令历史，以便确定要回到未来的哪个版本
	然后使用：git reset --hard commit_id。返回某个命令操作前。
	
	
git中分支：
	1、git分支任何变动只要没commit，切换到master利用git status 命令都是可以查看其状态（是待追踪，还是待commit）的，跟在分支中用git status查看是一样的,
	但是查看不到变动的具体内容；
	2、但若是分支的改动commit后，主分支就看不到变动状态了。当然还是查看不到具体的变动内容。变动的内容需要将分支合并到master后，master中才能看得到。
	3、合并分支出现冲突时，先找到冲突文件内容，手动修改，然后add，然后commit，最后再merge或者git stash pop